import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from collections import defaultdict
import math

# Konfiguration
st.set_page_config(
    page_title="VIA Charakterst√§rken Test",
    page_icon="üß†",
    layout="wide"
)

# Daten der Charakterst√§rken mit Farben und Dom√§nen
CHARACTER_STRENGTHS = {
    "Liebe zum Lernen": {
        "domain": "üß† Weisheit & Wissen",
        "color": "#4E79A7",
        "questions": [
            "Ich lese regelm√§√üig B√ºcher oder Artikel, um Neues zu lernen",
            "Neue Themen wecken sofort mein Interesse",
            "Ich besuche h√§ufig Kurse oder Workshops aus Interesse am Thema",
            "Das Gef√ºhl, etwas dazugelernt zu haben, bereitet mir Freude"
        ]
    },
    "Urteilsverm√∂gen": {
        "domain": "üß† Weisheit & Wissen",
        "color": "#4E79A7",
        "questions": [
            "Ich hinterfrage Informationen, bevor ich sie akzeptiere",
            "Bei Entscheidungen w√§ge ich verschiedene Perspektiven ab",
            "Ich √§ndere meine Meinung, wenn neue Fakten vorliegen",
            "Komplexe Probleme analysiere ich gr√ºndlich"
        ]
    },
    "Neugier": {
        "domain": "üß† Weisheit & Wissen",
        "color": "#4E79A7",
        "questions": [
            "Ich stelle oft Fragen, um Dinge besser zu verstehen",
            "Unbekannte Orte und Aktivit√§ten reizen mich",
            "Ich erkunde gerne neue Ideen und Konzepte",
            "Allt√§gliche Dinge betrachte ich oft mit Staunen"
        ]
    },
    "Kreativit√§t": {
        "domain": "üß† Weisheit & Wissen",
        "color": "#4E79A7",
        "questions": [
            "Ich habe oft originelle und einfallsreiche Ideen",
            "Ich suche nach neuen Wegen, um Aufgaben zu erledigen",
            "Kreative L√∂sungen machen mir besondere Freude",
            "Ich denke gerne √ºber unkonventionelle Ans√§tze nach"
        ]
    },
    "Weisheit": {
        "domain": "üß† Weisheit & Wissen",
        "color": "#4E79A7",
        "questions": [
            "Andere Menschen bitten mich oft um Rat",
            "Ich betrachte Situationen aus einer langfristigen Perspektive",
            "Meine Lebenserfahrung hilft mir bei schwierigen Entscheidungen",
            "Ich kann gut zwischen Wichtigem und Unwichtigem unterscheiden"
        ]
    },
    "Tapferkeit": {
        "domain": "üí™ Mut",
        "color": "#F28E2B",
        "questions": [
            "Ich stehe f√ºr meine √úberzeugungen ein, auch gegen Widerstand",
            "Angst h√§lt mich nicht davon ab, das Richtige zu tun",
            "Ich konfrontiere schwierige Situationen direkt",
            "Bei Bedrohungen bewahre ich die Ruhe"
        ]
    },
    "Ausdauer": {
        "domain": "üí™ Mut",
        "color": "#F28E2B",
        "questions": [
            "Ich gebe nicht auf, auch wenn Aufgaben schwierig werden",
            "Langfristige Projekte halte ich konsequent durch",
            "R√ºckschl√§ge motivieren mich, es weiter zu versuchen",
            "Ich erledige Aufgaben stets bis zum Ende"
        ]
    },
    "Authentizit√§t": {
        "domain": "üí™ Mut",
        "color": "#F28E2B",
        "questions": [
            "Ich bin immer ich selbst, egal in welcher Situation",
            "Ich stehe zu meinen Werten und Prinzipien",
            "Meine Handlungen entsprechen meinen √úberzeugungen",
            "Ich t√§usche nichts vor, um anderen zu gefallen"
        ]
    },
    "Enthusiasmus": {
        "domain": "üí™ Mut",
        "color": "#F28E2B",
        "questions": [
            "Ich gehe Aufgaben mit gro√üer Begeisterung an",
            "Meine Energie steckt oft andere an",
            "Ich betreibe Dinge mit vollem Einsatz",
            "Lebensfreude ist ein wichtiger Teil meines Wesens"
        ]
    },
    "Bindungsf√§higkeit": {
        "domain": "ü§ù Humanit√§t",
        "color": "#E15759",
        "questions": [
            "Tiefe zwischenmenschliche Beziehungen sind mir wichtig",
            "Ich pflege enge Verbindungen zu meinen Liebsten",
            "Gegenseitiges Vertrauen ist die Basis meiner Beziehungen",
            "Ich investiere Zeit und Energie in meine wichtigsten Beziehungen"
        ]
    },
    "Freundlichkeit": {
        "domain": "ü§ù Humanit√§t",
        "color": "#E15759",
        "questions": [
            "Ich helfe anderen gerne ohne Gegenleistung",
            "Gro√üz√ºgigkeit macht mir Freude",
            "Ich bemerke, wenn andere Unterst√ºtzung brauchen",
            "Kleine Gef√§lligkeiten sind f√ºr mich selbstverst√§ndlich"
        ]
    },
    "Soziale Intelligenz": {
        "domain": "ü§ù Humanit√§t",
        "color": "#E15759",
        "questions": [
            "Ich erkenne schnell die Stimmungen anderer Menschen",
            "In sozialen Situationen wei√ü ich intuitiv, was angemessen ist",
            "Ich kann mich gut in andere hineinversetzen",
            "Zwischenmenschliche Dynamiken verstehe ich gut"
        ]
    },
    "Teamwork": {
        "domain": "‚öñÔ∏è Gerechtigkeit",
        "color": "#76B7B2",
        "questions": [
            "In der Gruppe arbeite ich besonders effektiv",
            "Team-Erfolge sind mir wichtiger als Einzelleistungen",
            "Ich trage loyal zum Gruppenerfolg bei",
            "Gemeinsame Ziele motivieren mich besonders"
        ]
    },
    "Fairness": {
        "domain": "‚öñÔ∏è Gerechtigkeit",
        "color": "#76B7B2",
        "questions": [
            "Ich behandle alle Menschen gleich, unabh√§ngig von Herkunft oder Status",
            "Bei Entscheidungen lasse ich mich nicht von Sympathien leiten",
            "Gerechtigkeit ist mir ein wichtiges Anliegen",
            "Ich setze mich f√ºr faire Behandlung ein"
        ]
    },
    "F√ºhrungsverm√∂gen": {
        "domain": "‚öñÔ∏è Gerechtigkeit",
        "color": "#76B7B2",
        "questions": [
            "Ich kann Gruppen gut motivieren und leiten",
            "In Leitungsrollen f√ºhle ich mich wohl",
            "Ich organisiere gerne Aktivit√§ten f√ºr Gruppen",
            "Andere folgen mir freiwillig"
        ]
    },
    "Vergebungsbereitschaft": {
        "domain": "üïäÔ∏è M√§√üigung",
        "color": "#59A14F",
        "questions": [
            "Ich kann anderen leicht verzeihen",
            "Nach Konflikten gew√§hre ich eine zweite Chance",
            "Groll trage ich nicht lange mit mir herum",
            "Vergebung ist mir wichtiger als Rache"
        ]
    },
    "Bescheidenheit": {
        "domain": "üïäÔ∏è M√§√üigung",
        "color": "#59A14F",
        "questions": [
            "Ich prahle nicht mit meinen Erfolgen",
            "Im Mittelpunkt stehen macht mir nichts aus",
            "Meine F√§higkeiten sprechen f√ºr sich selbst",
            "Ich sehe mich nicht als etwas Besonderes"
        ]
    },
    "Vorsicht": {
        "domain": "üïäÔ∏è M√§√üigung",
        "color": "#59A14F",
        "questions": [
            "Ich √ºberlege Konsequenzen, bevor ich handle",
            "Risiken sch√§tze ich sorgf√§ltig ab",
            "Impulsive Entscheidungen vermeide ich",
            "Sorgf√§ltige Planung ist mir wichtig"
        ]
    },
    "Selbstregulation": {
        "domain": "üïäÔ∏è M√§√üigung",
        "color": "#59A14F",
        "questions": [
            "Ich kann meine Gef√ºhle gut kontrollieren",
            "Versuchungen widerstehe ich leicht",
            "Disziplin f√§llt mir nicht schwer",
            "Ich bleibe auch unter Stress gelassen"
        ]
    },
    "Sinn f√ºr das Sch√∂ne": {
        "domain": "‚ú® Spiritualit√§t",
        "color": "#EDC948",
        "questions": [
            "Ich bewundere h√§ufig Sch√∂nheit in Natur oder Kunst",
            "√Ñsthetische Erlebnisse ber√ºhren mich tief",
            "Ich nehme Sch√∂nheit im Alltag bewusst wahr",
            "Kunst, Musik oder Natur begeistern mich"
        ]
    },
    "Dankbarkeit": {
        "domain": "‚ú® Spiritualit√§t",
        "color": "#EDC948",
        "questions": [
            "Ich bin dankbar f√ºr die guten Dinge in meinem Leben",
            "Oft halte ich inne, um meine Dankbarkeit auszudr√ºcken",
            "Ich sch√§tze bewusst, was ich habe",
            "Dankbarkeit ist ein t√§glicher Teil meines Lebens"
        ]
    },
    "Hoffnung": {
        "domain": "‚ú® Spiritualit√§t",
        "color": "#EDC948",
        "questions": [
            "Ich blicke optimistisch in die Zukunft",
            "Auch in schwierigen Zeiten sehe ich Licht am Horizont",
            "Ich vertraue darauf, dass sich Dinge zum Guten wenden",
            "Positive Erwartungen pr√§gen meine Haltung"
        ]
    },
    "Humor": {
        "domain": "‚ú® Spiritualit√§t",
        "color": "#EDC948",
        "questions": [
            "Ich lache gerne und bringe andere zum Lachen",
            "Humor hilft mir in schwierigen Situationen",
            "Ich sehe oft die komische Seite des Lebens",
            "Spielerische Leichtigkeit ist mir wichtig"
        ]
    },
    "Spiritualit√§t": {
        "domain": "‚ú® Spiritualit√§t",
        "color": "#EDC948",
        "questions": [
            "Ich habe klare √úberzeugungen √ºber den Sinn des Lebens",
            "Spiritualit√§t gibt mir Halt und Orientierung",
            "Ich denke √ºber gr√∂√üere Zusammenh√§nge nach",
            "Mein Glaube beeinflusst mein Handeln"
        ]
    }
}

# Likert-Skala Optionen
LIKERT_OPTIONS = {
    1: "Trifft nicht zu",
    2: "Trifft eher nicht zu", 
    3: "Neutral",
    4: "Trifft eher zu",
    5: "Trifft voll zu"
}

def get_questions_for_version(version):
    """Gibt Fragen basierend auf der gew√§hlten Version zur√ºck"""
    questions = {}
    
    for strength, data in CHARACTER_STRENGTHS.items():
        if version == "short":
            questions[strength] = {
                "domain": data["domain"],
                "color": data["color"],
                "questions": data["questions"][:2]  # Nur erste 2 Fragen
            }
        elif version == "medium":
            questions[strength] = {
                "domain": data["domain"],
                "color": data["color"], 
                "questions": data["questions"][:3]  # Erste 3 Fragen
            }
        else:  # full
            questions[strength] = {
                "domain": data["domain"],
                "color": data["color"],
                "questions": data["questions"]  # Alle 4 Fragen
            }
    
    return questions

def calculate_results(responses):
    """Berechnet die Ergebnisse basierend auf den Antworten"""
    strength_scores = {}
    
    for strength, answers in responses.items():
        if answers:  # Nur wenn Antworten vorhanden
            raw_score = sum(answers.values())
            max_possible = len(answers) * 5
            percentage = (raw_score / max_possible) * 100
            
            strength_scores[strength] = {
                "score": percentage,
                "domain": CHARACTER_STRENGTHS[strength]["domain"],
                "color": CHARACTER_STRENGTHS[strength]["color"],
                "raw_score": raw_score,
                "max_possible": max_possible
            }
    
    # Ranking erstellen (h√∂chste Punktzahl = 100%)
    if strength_scores:
        max_score = max(s["score"] for s in strength_scores.values())
        
        for strength in strength_scores:
            if max_score > 0:
                # Relative Prozentzahl berechnen (wie im Original)
                strength_scores[strength]["relative_score"] = (strength_scores[strength]["score"] / max_score) * 100
            else:
                strength_scores[strength]["relative_score"] = 0
    
    return strength_scores

def create_ranking_table(results):
    """Erstellt eine Rangliste der St√§rken"""
    ranked_strengths = sorted(
        results.items(), 
        key=lambda x: x[1]["relative_score"], 
        reverse=True
    )
    
    ranking_data = []
    for rank, (strength, data) in enumerate(ranked_strengths, 1):
        ranking_data.append({
            "Rang": rank,
            "St√§rke": strength,
            "Wert": f"{data['relative_score']:.0f}%",
            "Dom√§ne": data["domain"],
            "Rohpunktzahl": f"{data['raw_score']}/{data['max_possible']}"
        })
    
    return pd.DataFrame(ranking_data)

def plot_results(results):
    """Erstellt Visualisierungen der Ergebnisse"""
    # Daten f√ºr Plot vorbereiten
    plot_data = []
    for strength, data in results.items():
        plot_data.append({
            "St√§rke": strength,
            "Wert": data["relative_score"],
            "Dom√§ne": data["domain"],
            "Farbe": data["color"]
        })
    
    df = pd.DataFrame(plot_data)
    
    # Balkendiagramm nach St√§rken
    fig1 = px.bar(
        df.sort_values("Wert", ascending=True),
        x="Wert",
        y="St√§rke",
        color="Dom√§ne",
        color_discrete_map={
            "üß† Weisheit & Wissen": "#4E79A7",
            "üí™ Mut": "#F28E2B", 
            "ü§ù Humanit√§t": "#E15759",
            "‚öñÔ∏è Gerechtigkeit": "#76B7B2",
            "üïäÔ∏è M√§√üigung": "#59A14F",
            "‚ú® Spiritualit√§t": "#EDC948"
        },
        title="Charakterst√§rken - Ranking",
        orientation="h"
    )
    fig1.update_layout(showlegend=True)
    
    # Dom√§nen-√úbersicht
    domain_scores = df.groupby("Dom√§ne")["Wert"].mean().reset_index()
    fig2 = px.pie(
        domain_scores,
        values="Wert",
        names="Dom√§ne",
        title="Durchschnittliche Auspr√§gung nach Dom√§nen",
        color="Dom√§ne",
        color_discrete_map={
            "üß† Weisheit & Wissen": "#4E79A7",
            "üí™ Mut": "#F28E2B",
            "ü§ù Humanit√§t": "#E15759", 
            "‚öñÔ∏è Gerechtigkeit": "#76B7B2",
            "üïäÔ∏è M√§√üigung": "#59A14F",
            "‚ú® Spiritualit√§t": "#EDC948"
        }
    )
    
    return fig1, fig2

def main():
    st.title("üß† VIA Charakterst√§rken Test")
    st.markdown("### Entdecke deine pers√∂nlichen St√§rken")
    
    # Sidebar f√ºr Version-Auswahl
    st.sidebar.header("üîß Einstellungen")
    version = st.sidebar.radio(
        "Test-Version w√§hlen:",
        ["Kurz (48 Fragen)", "Mittel (72 Fragen)", "Vollst√§ndig (96 Fragen)"],
        index=1
    )
    
    version_key = {
        "Kurz (48 Fragen)": "short",
        "Mittel (72 Fragen)": "medium", 
        "Vollst√§ndig (96 Fragen)": "full"
    }[version]
    
    st.sidebar.info(f"**{version}** - Basierend auf dem wissenschaftlichen VIA-Modell")
    
    # Fragen laden
    questions = get_questions_for_version(version_key)
    total_questions = sum(len(data["questions"]) for data in questions.values())
    
    st.sidebar.write(f"**{total_questions} Fragen** insgesamt")
    st.sidebar.write(f"**{len(questions)} Charakterst√§rken**")
    
    # Fragebogen
    st.header("üìù Fragebogen")
    st.write("Bitte beantworte die folgenden Fragen auf einer Skala von 1-5:")
    
    responses = {}
    progress_bar = st.progress(0)
    question_count = 0
    
    for strength, data in questions.items():
        st.subheader(f"**{strength}**")
        st.caption(f"Dom√§ne: {data['domain']}")
        
        strength_responses = {}
        for i, question in enumerate(data["questions"]):
            question_count += 1
            progress = question_count / total_questions
            progress_bar.progress(progress)
            
            col1, col2 = st.columns([3, 2])
            with col1:
                st.write(f"**{question}**")
            with col2:
                response = st.radio(
                    f"Antwort f√ºr: {question}",
                    options=list(LIKERT_OPTIONS.keys()),
                    format_func=lambda x: LIKERT_OPTIONS[x],
                    key=f"{strength}_{i}",
                    horizontal=True
                )
                strength_responses[question] = response
        
        responses[strength] = strength_responses
    
    # Auswertung
    if st.button("üöÄ Ergebnisse berechnen", type="primary"):
        if responses:
            with st.spinner("Berechne Ergebnisse..."):
                # Ergebnisse berechnen
                results = calculate_results(responses)
                
                # Ergebnisse anzeigen
                st.header("üìä Deine Ergebnisse")
                
                # Ranking Tabelle
                st.subheader("Rangliste deiner Charakterst√§rken")
                ranking_df = create_ranking_table(results)
                st.dataframe(ranking_df, use_container_width=True)
                
                # Visualisierungen
                col1, col2 = st.columns(2)
                
                with col1:
                    fig1, fig2 = plot_results(results)
                    st.plotly_chart(fig1, use_container_width=True)
                
                with col2:
                    st.plotly_chart(fig2, use_container_width=True)
                
                # Dom√§nen-√úbersicht
                st.subheader("üéØ Dom√§nen-√úbersicht")
                
                domains = {
                    "üß† Weisheit & Wissen": ["Liebe zum Lernen", "Urteilsverm√∂gen", "Neugier", "Kreativit√§t", "Weisheit"],
                    "üí™ Mut": ["Tapferkeit", "Ausdauer", "Authentizit√§t", "Enthusiasmus"],
                    "ü§ù Humanit√§t": ["Bindungsf√§higkeit", "Freundlichkeit", "Soziale Intelligenz"],
                    "‚öñÔ∏è Gerechtigkeit": ["Teamwork", "Fairness", "F√ºhrungsverm√∂gen"],
                    "üïäÔ∏è M√§√üigung": ["Vergebungsbereitschaft", "Bescheidenheit", "Vorsicht", "Selbstregulation"],
                    "‚ú® Spiritualit√§t": ["Sinn f√ºr das Sch√∂ne", "Dankbarkeit", "Hoffnung", "Humor", "Spiritualit√§t"]
                }
                
                for domain, strengths in domains.items():
                    domain_score = sum(results.get(s, {}).get("relative_score", 0) for s in strengths) / len(strengths)
                    
                    col1, col2 = st.columns([1, 4])
                    with col1:
                        st.metric(label=domain, value=f"{domain_score:.0f}%")
                    with col2:
                        st.progress(domain_score / 100)
                
                # Export Option
                st.subheader("üíæ Ergebnisse exportieren")
                csv_data = ranking_df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="üì• Ergebnisse als CSV herunterladen",
                    data=csv_data,
                    file_name="via_charakterstaerken_ergebnisse.csv",
                    mime="text/csv"
                )
                
                st.success("üéâ Auswertung abgeschlossen! Deine Charakterst√§rken wurden analysiert.")
        
        else:
            st.error("Bitte beantworte zun√§chst alle Fragen.")

if __name__ == "__main__":
    main()
